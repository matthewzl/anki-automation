"""
VERSION 0.0.2
"""

import genanki
import random
import pandas as pd
import fitz  # PyMuPDF
import os
import sys
import warnings
import platform
import re

warnings.filterwarnings('ignore', category=FutureWarning)  # suppress warning generated by pandas


def clear_terminal():
    if platform.system() == "Windows":
        os.system('cls')
    else:
        os.system('clear')


def process_string(s):
    s = s.strip()
    if (s.startswith('"') and s.endswith('"')) or (s.startswith("'") and s.endswith("'")):
        s = s[1:-1]
    s = s.strip()
    if platform.system() != "Windows":  # This isn't foolproof, but wouldn't anticipate the edge cases...
        s = re.sub(r'\\(?![\\"])', '', s)  # Remove single backslashes, keep escaped quotes or double backslashes
        s = re.sub(r'(\\\\)+', lambda m: '\\' * (len(m.group(0)) // 2), s)  # Reduce multiple backslashes by half
    return s


def apply_cmd(input):
    if input in ["clear", "cls", "clear()", "cls()"]:
        clear_terminal()
        return "continue"
    elif input in ["exit", "exit()"]:
        sys.exit()
    return "proceed"


def find_excel_and_pdf(directory):
    excel_file = None
    pdf_file = None

    for file in os.listdir(directory):
        if file.startswith('~$') or file.startswith('.'):
            continue

        if file.endswith('.xlsx') or file.endswith('.xls'):
            if excel_file is not None:
                raise Exception("Multiple Excel files found.")
            excel_file = os.path.join(directory, file)

        elif file.endswith('.pdf'):
            if pdf_file is not None:
                raise Exception("Multiple PDF files found.")
            pdf_file = os.path.join(directory, file)

    if excel_file is None or pdf_file is None:
        raise Exception("Either Excel or PDF file is missing.")

    return excel_file, pdf_file


def process_pdf_page(pdf_path, page_num, output_directory):
    # Construct the PNG filename
    pdf_basename = os.path.splitext(os.path.basename(pdf_path))[0]
    png_filename = f"{pdf_basename}_{page_num}.png"
    png_filepath = os.path.join(output_directory, png_filename)

    # Check if PNG already exists
    if not os.path.exists(png_filepath):
        # Open the PDF and extract the page
        doc = fitz.open(pdf_path)
        page = doc.load_page(page_num - 1)  # Adjust for 0-based indexing
        pix = page.get_pixmap()
        pix.save(png_filepath)
        doc.close()

    return png_filepath


if __name__ == "__main__":
    clear_terminal()

    while True:
        try:
            input_directory = process_string(input("ENTER FOLDER PATH: "))
            if apply_cmd(input_directory) == "continue":
                continue
            output_directory = input_directory  # adapt for future use on user end?

            excel_path, pdf_path = find_excel_and_pdf(input_directory)

            # Read the Excel file
            df = pd.read_excel(excel_path, header=None)

            # Remove existing header
            try:
                pd.to_numeric(df.iloc[0, 2])  # if no error, numeric; otherwise header
            except ValueError:
                df = df.drop(df.index[0]).reset_index(drop=True)

            # Perform manipulations on df to make it compatible w/ Anki format
            df = df.astype(str)
            df = df.applymap(lambda x: x.replace('\n', '<br>'))  # interpret line breaks originating from Excel
            df[0] = df[0] + " <br><br> {{c1::" + df[1] + "}} <br>"

            # Update third column and process PDF pages
            generated_image_paths = set()
            for index, row in df.iterrows():
                page_num = row[2]
                try:
                    png_path = process_pdf_page(pdf_path, int(page_num), input_directory)
                    generated_image_paths.add(png_path)
                    df.at[index, 2] = f"<img src=\"{os.path.basename(png_path)}\" />"
                except ValueError as e:
                    df.at[index, 2] = "  "  # needs empty space or else won't be registered

            # Keep only the first and updated third columns
            final_df = df[[0, 2]]

            cloze_model = genanki.Model(
                model_id=random.randrange(1 << 30, 1 << 31),
                name='Cloze Model with Image',
                fields=[
                    {'name': 'Text'},  # the cloze text field
                    {'name': 'Extra'},  # additional field for extra info or media
                ],
                templates=[
                    {
                        'name': 'Cloze Card',
                        'qfmt': '{{cloze:Text}}',  # front of card
                        'afmt': '{{cloze:Text}}<hr id="answer">{{Extra}}',  # back of card
                    },
                ],
                css="""
                .card {
                 font-family: arial;
                 font-size: 20px;
                 text-align: center;
                 color: black;
                 background-color: white;
                }
                .cloze {
                    font-weight: bold;
                    color: blue;
                }
                """
            )

            # Create a new genanki Deck
            pdf_basename = os.path.splitext(os.path.basename(pdf_path))[0]
            my_deck = genanki.Deck(
                random.randrange(1 << 30, 1 << 31),
                f"{pdf_basename} Deck"
            )

            # Add notes to the Deck
            for index, row in final_df.iterrows():
                my_note = genanki.Note(
                    model=cloze_model,
                    fields=[row[0], row[2]]  # row[0] is the front text, row[2] (1 is gone) is the back image
                )
                my_deck.add_note(my_note)

            # Create a genanki Package
            my_package = genanki.Package(my_deck)
            my_package.media_files = generated_image_paths  # List all image files

            # Save the package to an .apkg file
            output_apkg_path = os.path.join(output_directory, f"{pdf_basename}_deck.apkg")
            my_package.write_to_file(output_apkg_path)

            # Delete the generated PNG images
            for image_path in generated_image_paths:
                os.remove(image_path)

            print(f"SUCCESSFULLY MADE DECK FOR {input_directory}!\n")
        except Exception as e:
            print(f"PROCESS FAILED: {e}\n")
